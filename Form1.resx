<?xml version="1.0" encoding="utf-8"?>
<root>
  <!--
    Microsoft ResX Schema 

    Version 2.0

    The primary goals of this format is to allow a simple XML format
    that is mostly human readable. The generation and parsing of the
    various data types are done through the TypeConverter classes
    associated with the data types.

    Example:

    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>

    There are any number of "resheader" rows that contain simple
    name/value pairs.

    Each data row contains a name, and value. The row also contains a
    type or mimetype. Type corresponds to a .NET class that support
    text/value conversion through the TypeConverter architecture.
    Classes that don't support this are serialized and stored with the
    mimetype set.

    The mimetype is used for serialized objects, and tells the
    ResXResourceReader how to depersist the object. This is currently not
    extensible. For a given mimetype the value must be set accordingly:

    Note - application/x-microsoft.net.object.binary.base64 is the format
    that the ResXResourceWriter will generate, however the reader can
    read any of the formats listed below.

    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAuPF8A////AAMEBjUAAABbAAAAWgAAAFoAAABbAAAAMwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAACkzUwAsKEgHBQ8VtgBSW/8Aa3T+AG50/gBYXP8ACgytAAAABAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEC
        BAABAgQFAAABHgAAAAQAAAAAHiU8AB0QIRIEISnPAMHY/wDt//8A8///ANDY/wAgIscAAAANAAAAAAEA
        AAABAAAEAAAAHgAAAAUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAACAQUAAwADAwADBGoAEBPbAAQFdQAAAAsAAAADBwACQAIsNecA0uz/AKi4/wCtuP8A4ez/AC8z4gAA
        ADwAAAAEAQAACwAFBXYAExTaAAQEaAAAAAMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        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
        AB/8AAA//jAMf//wD///+B////////////8=
</value>
  </data>
</root>